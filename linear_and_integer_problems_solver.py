# -*- coding: utf-8 -*-
"""linear and integer problems solver

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wJJL760MjRjw8V8HZXgF7al0AUBiGjzg
"""

import numpy as np
!pip install pulp
!pip install pytesseract
from scipy.optimize import linprog
from pulp import LpProblem, LpMaximize, LpVariable, lpSum
import matplotlib.pyplot as plt
import cv2
import pytesseract

def extract_problem_from_image(image_path):
    """
    Extract the linear programming problem from an image.
    :param image_path: Path to the image file.
    :return: Objective function coefficients, constraint coefficients, and RHS values.
    """
    # Read the image
    img = cv2.imread(image_path)

    # Convert to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Apply OCR to extract text
    text = pytesseract.image_to_string(gray)

    print("Extracted Text:", text)

    # Example: Parse the text for specific patterns (this needs to be adapted to input format)
    lines = text.split("\n")
    c = []
    A = []
    b = []
    parsing_constraints = False

    for line in lines:
        if "Objective" in line:
            c = list(map(float, line.split(":")[1].strip().split()))
        elif "Constraints" in line:
            parsing_constraints = True
        elif parsing_constraints and line.strip():
            parts = line.split("<=")
            A.append(list(map(float, parts[0].strip().split())))
            b.append(float(parts[1].strip()))

    return np.array(c), np.array(A), np.array(b)

def simplex_method(c, A, b):
    """
    Solve linear programming problem using Simplex method.
    :param c: Coefficients of the objective function.
    :param A: Coefficients of the inequality constraints.
    :param b: Right-hand side values of the constraints.
    :return: Optimal solution and value.
    """
    res = linprog(c, A_ub=A, b_ub=b, method='simplex')
    return res.x, res.fun

def integer_programming(c, A, b):
    """
    Solve integer programming problem using PuLP.
    :param c: Coefficients of the objective function.
    :param A: Coefficients of the inequality constraints.
    :param b: Right-hand side values of the constraints.
    :return: Optimal solution and value.
    """
    prob = LpProblem("Integer_Programming", LpMaximize)
    vars = [LpVariable(f"x{i}", lowBound=0, cat="Integer") for i in range(len(c))]
    prob += lpSum([c[i] * vars[i] for i in range(len(c))])

    for i in range(len(A)):
        prob += lpSum([A[i][j] * vars[j] for j in range(len(c))]) <= b[i]

    prob.solve()
    solution = [var.varValue for var in vars]
    return solution, prob.objective.value()

def visualize_lp(c, A, b):
    """
    Visualize a 2-variable linear programming problem.
    :param c: Coefficients of the objective function.
    :param A: Coefficients of the inequality constraints.
    :param b: Right-hand side values of the constraints.
    """
    if len(c) != 2 or A.shape[1] != 2:
        print("Visualization is only supported for 2D problems.")
        return

    x = np.linspace(0, 10, 400)
    plt.figure(figsize=(8, 8))

    for i in range(A.shape[0]):
        plt.plot(x, (b[i] - A[i, 0] * x) / A[i, 1], label=f'Constraint {i + 1}')

    plt.xlim(0, 10)
    plt.ylim(0, 10)
    plt.xlabel('x1')
    plt.ylabel('x2')
    plt.title('Linear Programming Constraints')
    plt.legend()
    plt.grid(True)
    plt.show()

def main():
    print("Welcome to the Linear and Integer Programming Solver")
    print("Choose a problem type:")
    print("1. Linear Programming")
    print("2. Integer Programming")
    print("3. Extract problem from image")

    choice = int(input("Enter your choice: "))

    if choice == 3:
        image_path = input("Enter the path to the problem image: ")
        c, A, b = extract_problem_from_image(image_path)
        print("Objective Function Coefficients:", c)
        print("Constraint Coefficients:", A)
        print("RHS Values:", b)
    else:
        num_vars = int(input("Enter the number of variables: "))
        num_constraints = int(input("Enter the number of constraints: "))

        c = np.array([float(input(f"Enter the coefficient of x{i + 1} in the objective function: ")) for i in range(num_vars)])
        A = np.array([[float(input(f"Enter the coefficient of x{i + 1} in constraint {j + 1}: ")) for i in range(num_vars)] for j in range(num_constraints)])
        b = np.array([float(input(f"Enter the right-hand side value of constraint {j + 1}: ")) for j in range(num_constraints)])

    if choice in [1, 3]:
        solution, optimal_value = simplex_method(c, A, b)
    elif choice == 2:
        solution, optimal_value = integer_programming(c, A, b)
    else:
        print("Invalid choice.")
        return

    print("\nOptimal Solution:", solution)
    print("Optimal Value:", optimal_value)

    visualize = input("Would you like to visualize the problem (only for 2 variables)? (yes/no): ").lower()
    if visualize == 'yes':
        visualize_lp(c, A, b)

if __name__ == "__main__":
    main()

